#!/usr/bin/env bash

# This script checks your solution against our reference solution.
# ACADEMIC INTEGRITY WARNING:
# Do not reference any of the files in the tests folder. Using those files
# to construct your solution is an academic integrity violation.

cd "$(dirname "$0")" || exit

indent4() {
  sed -e 's/^/    /'
}
indent8() {
  sed -e 's/^/        /'
}
list_dir() {
  if which tree &> /dev/null; then
    pushd "$@" &> /dev/null
    tree -F --dirsfirst .
    popd &> /dev/null
  else
    pushd "$@" &> /dev/null
    find . | sort
    popd &> /dev/null
  fi
}

# Helper colors
cnone="$(echo -ne '\033[0m')"
cwhiteb="$(echo -ne '\033[1;37m')"
cred="$(echo -ne '\033[0;31m')"
cgreen="$(echo -ne '\033[0;32m')"

# Detects whether we can add colors or not
# http://stackoverflow.com/a/911213
in_white() {
  [ -t 1 ] && echo -n "$cwhiteb"
  cat -
  [ -t 1 ] && echo -n "$cnone"
}
in_red() {
  [ -t 1 ] && echo -n "$cred"
  cat -
  [ -t 1 ] && echo -n "$cnone"
}
in_green() {
  [ -t 1 ] && echo -n "$cgreen"
  cat -
  [ -t 1 ] && echo -n "$cnone"
}

scores=""

check_doesnt_cheat() {
  local file=$1

 if grep -q cat "$file"; then
   echo "    You seem to be using 'cat' in your solution. This is not valid for this lab." | in_red
   return 1
 fi

 if grep -q echo "$file"; then
   echo "    You seem to be using 'echo' in your solution. This is not valid for this lab." | in_red
   return 1
 fi

}

check_if_executable() {
  local file="$1"

  if [ ! -f "$file" ]; then
    echo "    $file does not exist." | in_red
    return 1
  fi

  if [ ! -x "$file" ]; then
    echo "    $file does not have executable permissions." | in_red
    return 1
  fi

  if ! head -n 1 "$file" | grep '#!/.*bash' &> /dev/null; then
    echo "    $file does not have a shebang." | in_red
    return 1
  fi
}

function fail_test {
    local test_name="$1"

    ((++tests_failed))
    scores=$scores"\"$test_name\": 0"
}

tests_passed=0
tests_failed=0
function check_solution {
  local test_name=$1
  local theirs=$2
  local ours=$3
  local should_sort=$4

  echo "Testing $test_name..." | in_white
  # The first is for GNU mktemp, the second is for OS X
  temp_file=$(mktemp 2> /dev/null || mktemp -t tmp)

  # cd into folder with student's code, then cd back here after
  pushd .. &> /dev/null
  check_if_executable "./$theirs"
  good_executable="$?"
  if [ $good_executable -ne 0 ]; then
    popd &> /dev/null
    fail_test "$test_name"
    return
  fi

  check_doesnt_cheat "./$theirs"
  doesnt_cheat="$?"
  if [ $doesnt_cheat -ne 0 ]; then
    popd &> /dev/null
    fail_test "$test_name"
    return
  fi


  if [ $should_sort -eq 1 ]; then
    "./$theirs" | sort > "$temp_file"
  else
    "./$theirs" > "$temp_file"
  fi
  popd &> /dev/null

  if [[ $(diff "$temp_file" "$ours") ]]; then
    echo "Test failed. Diff output is below." | indent4 | in_red
    echo "'-' signs are next to your output." | indent4
    echo "'+' signs are next to the expected output." | indent4
    echo
    diff -u "$temp_file" "$ours" | tail -n +4 | indent8
    fail_test "$test_name"
  else
    echo "Test passed." | indent4 | in_green
    ((++tests_passed))
    scores=$scores"\"$test_name\": 1"
  fi

  rm "$temp_file"
}

echo
check_solution avoid-the-dead avoid-the-dead.sh tests/avoid-the-dead.sol 1
scores="$scores, "
echo
check_solution midnight-ambush midnight-ambush.sh tests/midnight-ambush.sol 0
scores="$scores, "
echo
check_solution burn-baby-burn burn-baby-burn.sh tests/burn-baby-burn.sol 0
scores="$scores, "
echo
check_solution find-survivors find-survivors.sh tests/find-survivors.sol 1
scores="$scores, "
echo
check_solution "stock-up (bonus)" stock-up.sh tests/stock-up.sol 1

echo
echo "Finished."
echo "Tests passed: $tests_passed"
echo "Tests failed: $tests_failed"
echo "Tests total:" $((tests_failed + tests_passed))
echo
echo "{\"scores\": {$scores}}"
